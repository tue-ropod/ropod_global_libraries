classdef ropod_sem_waypoint_list < robotics.ros.Message
    %ropod_sem_waypoint_list MATLAB implementation of ropod_ros_msgs/ropod_sem_waypoint_list
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ropod_ros_msgs/ropod_sem_waypoint_list' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'e6d4e7aa26baaafdc8e30eaeb0a7f953' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        RopodRosMsgsRopodSemWaypointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('ropod_ros_msgs/ropod_sem_waypoint') % Dispatch to MATLAB class for message type ropod_ros_msgs/ropod_sem_waypoint
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        SemWaypoint
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'SemWaypoint', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'SemWaypoint'} % List of non-constant message properties
        ROSPropertyList = {'header', 'sem_waypoint'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ropod_sem_waypoint_list(msg)
            %ropod_sem_waypoint_list Construct the message object ropod_sem_waypoint_list
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ropod_sem_waypoint_list', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function semwaypoint = get.SemWaypoint(obj)
            %get.SemWaypoint Get the value for property SemWaypoint
            if isempty(obj.Cache.SemWaypoint)
                javaArray = obj.JavaMessage.getSemWaypoint;
                array = obj.readJavaArray(javaArray, obj.RopodRosMsgsRopodSemWaypointClass);
                obj.Cache.SemWaypoint = feval(obj.RopodRosMsgsRopodSemWaypointClass, array);
            end
            semwaypoint = obj.Cache.SemWaypoint;
        end
        
        function set.SemWaypoint(obj, semwaypoint)
            %set.SemWaypoint Set the value for property SemWaypoint
            if ~isvector(semwaypoint) && isempty(semwaypoint)
                % Allow empty [] input
                semwaypoint = feval([obj.RopodRosMsgsRopodSemWaypointClass '.empty'], 0, 1);
            end
            
            validateattributes(semwaypoint, {obj.RopodRosMsgsRopodSemWaypointClass}, {'vector'}, 'ropod_sem_waypoint_list', 'SemWaypoint');
            
            javaArray = obj.JavaMessage.getSemWaypoint;
            array = obj.writeJavaArray(semwaypoint, javaArray, obj.RopodRosMsgsRopodSemWaypointClass);
            obj.JavaMessage.setSemWaypoint(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.SemWaypoint)
                obj.Cache.SemWaypoint = [];
                obj.Cache.SemWaypoint = obj.SemWaypoint;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.SemWaypoint = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.SemWaypoint = copy(obj.SemWaypoint);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            SemWaypointCell = arrayfun(@(x) feval([obj.RopodRosMsgsRopodSemWaypointClass '.loadobj'], x), strObj.SemWaypoint, 'UniformOutput', false);
            obj.SemWaypoint = vertcat(SemWaypointCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Header = saveobj(obj.Header);
            strObj.SemWaypoint = arrayfun(@(x) saveobj(x), obj.SemWaypoint);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.ropod_ros_msgs.ropod_sem_waypoint_list.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.ropod_ros_msgs.ropod_sem_waypoint_list;
            obj.reload(strObj);
        end
    end
end
