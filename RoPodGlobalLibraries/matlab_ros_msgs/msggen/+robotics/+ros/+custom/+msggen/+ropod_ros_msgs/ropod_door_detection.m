classdef ropod_door_detection < robotics.ros.Message
    %ropod_door_detection MATLAB implementation of ropod_ros_msgs/ropod_door_detection
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ropod_ros_msgs/ropod_door_detection' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f8024d7b9b46001a1cca08cecb579da3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Id
        Type
        Open
        Closed
        Undetectable
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Closed', 'Header', 'Id', 'Open', 'Type', 'Undetectable'} % List of non-constant message properties
        ROSPropertyList = {'closed', 'header', 'id', 'open', 'type', 'undetectable'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ropod_door_detection(msg)
            %ropod_door_detection Construct the message object ropod_door_detection
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ropod_door_detection', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = char(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'char'}, {}, 'ropod_door_detection', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function type = get.Type(obj)
            %get.Type Get the value for property Type
            type = char(obj.JavaMessage.getType);
        end
        
        function set.Type(obj, type)
            %set.Type Set the value for property Type
            validateattributes(type, {'char'}, {}, 'ropod_door_detection', 'Type');
            
            obj.JavaMessage.setType(type);
        end
        
        function open = get.Open(obj)
            %get.Open Get the value for property Open
            open = logical(obj.JavaMessage.getOpen);
        end
        
        function set.Open(obj, open)
            %set.Open Set the value for property Open
            validateattributes(open, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ropod_door_detection', 'Open');
            
            obj.JavaMessage.setOpen(open);
        end
        
        function closed = get.Closed(obj)
            %get.Closed Get the value for property Closed
            closed = logical(obj.JavaMessage.getClosed);
        end
        
        function set.Closed(obj, closed)
            %set.Closed Set the value for property Closed
            validateattributes(closed, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ropod_door_detection', 'Closed');
            
            obj.JavaMessage.setClosed(closed);
        end
        
        function undetectable = get.Undetectable(obj)
            %get.Undetectable Get the value for property Undetectable
            undetectable = logical(obj.JavaMessage.getUndetectable);
        end
        
        function set.Undetectable(obj, undetectable)
            %set.Undetectable Set the value for property Undetectable
            validateattributes(undetectable, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ropod_door_detection', 'Undetectable');
            
            obj.JavaMessage.setUndetectable(undetectable);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.Type = obj.Type;
            cpObj.Open = obj.Open;
            cpObj.Closed = obj.Closed;
            cpObj.Undetectable = obj.Undetectable;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.Type = strObj.Type;
            obj.Open = strObj.Open;
            obj.Closed = strObj.Closed;
            obj.Undetectable = strObj.Undetectable;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.Type = obj.Type;
            strObj.Open = obj.Open;
            strObj.Closed = obj.Closed;
            strObj.Undetectable = obj.Undetectable;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.ropod_ros_msgs.ropod_door_detection.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.ropod_ros_msgs.ropod_door_detection;
            obj.reload(strObj);
        end
    end
end
