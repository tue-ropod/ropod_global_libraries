classdef ropod_demo_area < robotics.ros.Message
    %ropod_demo_area MATLAB implementation of ropod_ros_msgs/ropod_demo_area
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ropod_ros_msgs/ropod_demo_area' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '631710d51bc6c3dcae798ff1f05b84e4' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        RopodRosMsgsRopodDemoStatusClass = robotics.ros.msg.internal.MessageFactory.getClassForType('ropod_ros_msgs/ropod_demo_status') % Dispatch to MATLAB class for message type ropod_ros_msgs/ropod_demo_status
        RopodRosMsgsRopodDemoWaypointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('ropod_ros_msgs/ropod_demo_waypoint') % Dispatch to MATLAB class for message type ropod_ros_msgs/ropod_demo_waypoint
    end
    
    properties (Dependent)
        AreaName
        Id
        LocationStatus
        Waypoints
    end
    
    properties (Access = protected)
        Cache = struct('LocationStatus', [], 'Waypoints', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AreaName', 'Id', 'LocationStatus', 'Waypoints'} % List of non-constant message properties
        ROSPropertyList = {'areaName', 'id', 'locationStatus', 'waypoints'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ropod_demo_area(msg)
            %ropod_demo_area Construct the message object ropod_demo_area
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function areaname = get.AreaName(obj)
            %get.AreaName Get the value for property AreaName
            areaname = char(obj.JavaMessage.getAreaName);
        end
        
        function set.AreaName(obj, areaname)
            %set.AreaName Set the value for property AreaName
            validateattributes(areaname, {'char'}, {}, 'ropod_demo_area', 'AreaName');
            
            obj.JavaMessage.setAreaName(areaname);
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = char(obj.JavaMessage.getId);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'char'}, {}, 'ropod_demo_area', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function locationstatus = get.LocationStatus(obj)
            %get.LocationStatus Get the value for property LocationStatus
            if isempty(obj.Cache.LocationStatus)
                obj.Cache.LocationStatus = feval(obj.RopodRosMsgsRopodDemoStatusClass, obj.JavaMessage.getLocationStatus);
            end
            locationstatus = obj.Cache.LocationStatus;
        end
        
        function set.LocationStatus(obj, locationstatus)
            %set.LocationStatus Set the value for property LocationStatus
            validateattributes(locationstatus, {obj.RopodRosMsgsRopodDemoStatusClass}, {'nonempty', 'scalar'}, 'ropod_demo_area', 'LocationStatus');
            
            obj.JavaMessage.setLocationStatus(locationstatus.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.LocationStatus)
                obj.Cache.LocationStatus.setJavaObject(locationstatus.getJavaObject);
            end
        end
        
        function waypoints = get.Waypoints(obj)
            %get.Waypoints Get the value for property Waypoints
            if isempty(obj.Cache.Waypoints)
                javaArray = obj.JavaMessage.getWaypoints;
                array = obj.readJavaArray(javaArray, obj.RopodRosMsgsRopodDemoWaypointClass);
                obj.Cache.Waypoints = feval(obj.RopodRosMsgsRopodDemoWaypointClass, array);
            end
            waypoints = obj.Cache.Waypoints;
        end
        
        function set.Waypoints(obj, waypoints)
            %set.Waypoints Set the value for property Waypoints
            if ~isvector(waypoints) && isempty(waypoints)
                % Allow empty [] input
                waypoints = feval([obj.RopodRosMsgsRopodDemoWaypointClass '.empty'], 0, 1);
            end
            
            validateattributes(waypoints, {obj.RopodRosMsgsRopodDemoWaypointClass}, {'vector'}, 'ropod_demo_area', 'Waypoints');
            
            javaArray = obj.JavaMessage.getWaypoints;
            array = obj.writeJavaArray(waypoints, javaArray, obj.RopodRosMsgsRopodDemoWaypointClass);
            obj.JavaMessage.setWaypoints(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Waypoints)
                obj.Cache.Waypoints = [];
                obj.Cache.Waypoints = obj.Waypoints;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.LocationStatus = [];
            obj.Cache.Waypoints = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.AreaName = obj.AreaName;
            cpObj.Id = obj.Id;
            
            % Recursively copy compound properties
            cpObj.LocationStatus = copy(obj.LocationStatus);
            cpObj.Waypoints = copy(obj.Waypoints);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.AreaName = strObj.AreaName;
            obj.Id = strObj.Id;
            obj.LocationStatus = feval([obj.RopodRosMsgsRopodDemoStatusClass '.loadobj'], strObj.LocationStatus);
            WaypointsCell = arrayfun(@(x) feval([obj.RopodRosMsgsRopodDemoWaypointClass '.loadobj'], x), strObj.Waypoints, 'UniformOutput', false);
            obj.Waypoints = vertcat(WaypointsCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.AreaName = obj.AreaName;
            strObj.Id = obj.Id;
            strObj.LocationStatus = saveobj(obj.LocationStatus);
            strObj.Waypoints = arrayfun(@(x) saveobj(x), obj.Waypoints);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.ropod_ros_msgs.ropod_demo_area.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.ropod_ros_msgs.ropod_demo_area;
            obj.reload(strObj);
        end
    end
end
